[
  {
    "objectID": "deck.html",
    "href": "deck.html",
    "title": "deck",
    "section": "",
    "text": "source\n\nDeck\n\n Deck ()\n\nA deck of 52 cards, not including jokers\nWhen we initially create a deck, all of the cards will be present:\n\ndeck = Deck()\n\nThat should be 52 cards.\n\ntest_eq(len(deck),52)\n\nAs a reminder, these are suits we defined in a Card:\n\nsuits=[\"♠️\",\"♣️\",\"♥️\",\"♦️\"]\n\nWe can chheck if, say, the Ace of clubs in the deck\n\nCard(1,1) in deck\n\nTrue\n\n\n\nsource\n\n\nDeck.pop\n\n Deck.pop (idx:int=-1)\n\nremove one card from the deck\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nidx\nint\n-1\nThe index of the card to remove, defaulting to the last one\n\n\n\n\n# deck = Deck()\ntest_eq(Deck().pop(),Card(3,13))\n\n\nsource\n\n\nDeck.remove\n\n Deck.remove (card:nbdev_cards_zr.card.Card)\n\nremove Card from the deck or release exception if it is not there\n\n\n\n\nType\nDetails\n\n\n\n\ncard\nCard\nCard to remove"
  },
  {
    "objectID": "card.html",
    "href": "card.html",
    "title": "card – A basic playing card",
    "section": "",
    "text": "suits=[\"♠️\",\"♣️\",\"♥️\",\"♦️\"]\nranks = [\"None\",\"A\"]+[str(x) for x in range(2,11)]+[\"J\",\"Q\",\"K\"]\nWe will be using numbers to represent playing card clubs and ranks. These are the suits:\nFor instance the suits at index 0:\nThese are the ranks:\nFor instance the ranks at index 1(note that there isn’t playing card at position 0, since we want the ranks to match the indices where possible):\nsource"
  },
  {
    "objectID": "card.html#comparison-operators",
    "href": "card.html#comparison-operators",
    "title": "card – A basic playing card",
    "section": "Comparison operators",
    "text": "Comparison operators\nEquality, less than, and greater than work on the rank and suit indices:\n\nsource\n\nCard.__eq__\n\n Card.__eq__ (a:__main__.Card)\n\nReturn self==value.\nFor instance, here’s some tests for equality…\n\ntest_eq(Card(suit=1,rank=3),Card(suit=1,rank=3))\n\n… and a test of <…\n\nassert Card(suit=1,rank=3) < Card(suit=2,rank=3)\n\n… and finally of >:\n\nassert not Card(suit=1,rank=3) > Card(suit=2,rank=3)\nassert  Card(suit=3,rank=3) > Card(suit=2,rank=3)\n\n\ntest_eq\n\n<function fastcore.test.test_eq(a, b)>\n\n\n\nsource\n\n\nCard\n\n Card (suit:int, rank:int)\n\nA playing card, created by passing in rank and suit\n\n\n\n\nType\nDetails\n\n\n\n\nsuit\nint\nAn index into suits\n\n\nrank\nint\nAn index into ranks"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev_cards_zr",
    "section": "",
    "text": "A deck of cards demo of nbdev"
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "nbdev_cards_zr",
    "section": "Install",
    "text": "Install\nInstall using:\npip install nbdev_cards_zr\nor:\nconda install -c ZHANGROU-99 nbdev-cards"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "nbdev_cards_zr",
    "section": "How to use",
    "text": "How to use\nThis lib provides a Card class you can use to create, display and compare playing cards.\n\nc = Card(suit=1,rank=3)"
  }
]